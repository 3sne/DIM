# This workflow runs when a PR is merged
# This workflow runs every Monday @ 0000 UTC (1700 PST)
name: Publish Release
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout - DIM
        uses: actions/checkout@v2

      - name: Install Node
        uses: actions/setup-node@v1.4.2
        with:
          node-version: '14.x'

      - name: Cache eslint
        uses: actions/cache@v2
        env:
          cache-name: cache-eslint
        with:
          path: ~/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/eslint.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: git config
        run: |
          git config --global user.email "destinyitemmanager@gmail.com"
          git config --global user.name "DIM Release Bot"

      - name: openssl
        run: |
          openssl aes-256-cbc -K $encrypted_3184b4fb5b91_key -iv $encrypted_3184b4fb5b91_iv -in id_rsa.enc -out ~/.ssh/dim_travis.rsa -d
          chmod 600 ~/.ssh/dim_travis.rsa
          echo "Host github.com\n\tHostName github.com\n\tUser git\n\tIdentityFile ~/.ssh/dim_travis.rsa\n" >> ~/.ssh/config
        env:
          encrypted_3184b4fb5b91_key: ${{ secrets.encrypted_3184b4fb5b91_key }}
          encrypted_3184b4fb5b91_iv: ${{ secrets.encrypted_3184b4fb5b91_iv }}

      - name: Set Version
        if: github.event_name == 'workflow_dispatch'
        run: echo ::set-env name=VERSION::"$(npm --no-git-tag-version version patch | sed 's/^v//)"

      - name: Set Version
        if: github.event_name != 'workflow_dispatch'
        run: echo ::set-env name=VERSION::"$(npm --no-git-tag-version version minor | sed 's/^v//)"

      - name: Echo Version
        run: echo New production version is $VERSION

      - name: Update changelog & release notes
        run: |
          echo $VERSION > release-notes.txt
          awk '/## Next/{flag=1;next}/##/{flag=0}flag' docs/CHANGELOG.md >> release-notes.txt
          OPENSPAN='\<span className="changelog-date"\>'
          CLOSESPAN='\<\/span\>'
          DATE=$(TZ="America/Los_Angeles" date +"%Y-%m-%d")
          perl -i'' -pe"s/^## Next/## Next\n\n## $VERSION $OPENSPAN($DATE)$CLOSESPAN/" docs/CHANGELOG.md

      - name: Add these other changes to the version commit
        run: |
          git add -u
          git commit -m"$VERSION"
          git tag "v$VERSION"

      - name: Set up SSH keys for rsync
        run: cp ~/.ssh/dim_travis.rsa config && cp ../id_rsa.pub config/dim_travis.rsa.pub

      - name: yarn install
        uses: bahmutov/npm-install@v1

      - name: yarn test
        run: yarn test

      - name: yarn run lint-check
        run: |
          find . -type d -name "node_modules" -prune -o -type f -iregex '.*.ts\|.*.js\|.*.tsx\|.*.jsx' -exec ./build/set-mtime-to-md5.sh {} \;
          yarn run lint-check

      - name: build release
        run: yarn run build-release
        env:
          WEB_API_KEY: ${{ secrets.WEB_API_KEY }}
          WEB_OAUTH_CLIENT_ID: ${{ secrets.WEB_OAUTH_CLIENT_ID }}
          WEB_OAUTH_CLIENT_SECRET: ${{ secrets.WEB_OAUTH_CLIENT_SECRET }}
          DIM_API_KEY: ${{ secrets.DIM_API_KEY }}

      - name: Compress Files
        uses: stefh/ghaction-CompressFiles@v1
        with:
          path: '/dist'
          extensions: '.js,.html,.css,.json,.map,.ttf,.eot,.svg,.wasm'
          tools: 'brotli,gzip'

      - name: rsync content
        # Sync everything but the HTML first, so it's ready to go
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --exclude="*.html, service-worker.js, version.json"
          path: "dist/"
          remote_path: ${{ secrets.REMOTE_PATH }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_key: 'config/dim_travis.rsa'

      - name: rsync HTML
        # Then sync the HTML which will start using the new content
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --include="*.html, service-worker.js, version.json"
          path: "dist/"
          remote_path: ${{ secrets.REMOTE_PATH }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_key: 'config/dim_travis.rsa'

      - name: Update CF
        if: $CLOUDFLARE_KEY
        # Purge the cache in CloudFlare for long-lived files
        run: |
            curl -X POST "https://api.cloudflare.com/client/v4/zones/2c34c69276ed0f6eb2b9e1518fe56f74/purge_cache" \
              -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_KEY" -H "Content-Type: application/json" \
              --data '{"files":["https://app.destinyitemmanager.com", "https://app.destinyitemmanager.com/index.html", "https://app.destinyitemmanager.com/version.json", "https://app.destinyitemmanager.com/service-worker.js", "https://app.destinyitemmanager.com/gdrive-return.html", "https://app.destinyitemmanager.com/return.html", "https://app.destinyitemmanager.com/manifest-webapp-6-2018.json", "https://app.destinyitemmanager.com/manifest-webapp-6-2018-ios.json"]}'
        env:
          CLOUDFLARE_KEY: ${{ secrets.CLOUDFLARE_KEY }},
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }},


      - name: push tags and changes
        run: git push --tags origin master:master

      - name: publish a release on GitHub
        run: GITHUB_TOKEN=$GITHUB_ACCESS_TOKEN hub release create -c -F release-notes.txt "v$VERSION"